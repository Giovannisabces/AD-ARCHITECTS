---
interface Props {
  gallery_name: string;
  size: number;
  subset?: string;
}
const { gallery_name, size, subset} = Astro.props;
import names from "@/shared/data.json";
const size_gallery = size;
let gallery_items = [];
const title_service = {interiores: [""]};

//  Get a new gallery with the specified name
for (let i = 1; i <= size_gallery ; i++) {
    // gallery_items.push({src: `./src/img/${gallery_name}/${gallery_name}-${i}.jpg`})
    if(subset!=undefined){
      gallery_items.push({src: `./src/img/${gallery_name}/${subset}/${subset}-1.jpg`})
    } else {
      gallery_items.push({src: `./src/img/${gallery_name}/${gallery_name}-1.jpg`})
    }
}
---
<section class="gallery-container__section w-10/12 my-8 mx-auto" id="gallery-container">
    <div class="gallery-container mx-auto max-w-4xl">
    {
        gallery_items.map((gallery,index:number) => {
            return (<div class={`container-${index} container rounded-xl flex flex-col justify-center  bg-cover bg-no-repeat w-full h-auto aspect-square`} 
                style={`
                    width: 100%;
                    background-image: linear-gradient(to top, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url(${gallery.src});
                    background-position: center center;
                    background-repeat: no-repeat;
                    background-size: cover;
                  `}>
                <p class="relative text-slate-950 text-xl sm:text-xs text-center font-bold"> { names.interiores[index] } </p>
              </div> )
        })
    }
  </div>
    <img src="" alt="">
</section>
<style>
    
.gallery-container {
  display: grid;
  max-width: 800 px;
  grid-template-columns: repeat(
    auto-fit, minmax(120px,1fr));
    /* auto-fill, minmax(); -> Hace que se rellene pero no ocupe todo el espacio */
    /* Auto-fit -> Hace que se rellene todo */

  gap: 10px;
}

/* img{
  width: 200 px;
  height: auto;
} */
</style>